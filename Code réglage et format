#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <RTClib.h>
#include <LedControl.h>

// OLED Display Configuration
#define NUM_MATRICES 4
#define DIN_PIN 11
#define CLK_PIN 13
#define CS_PIN 10
LedControl lc = LedControl(DIN_PIN, CLK_PIN, CS_PIN, NUM_MATRICES);
RTC_DS1307 rtc;

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Button Pins
#define BTN_NAVIGATE 7
#define BTN_SELECT 5

// Binary representations for LED matrix digits
const byte chiffresBinaire[10][8] = {
  {0b00111100, 0b01000010, 0b01000010, 0b01000010, 0b01000010, 0b01000010, 0b01000010, 0b00111100}, 
  {0b00001000, 0b00011000, 0b00101000, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00111110}, 
  {0b00111100, 0b01000010, 0b00000010, 0b00001100, 0b00110000, 0b01000000, 0b01000010, 0b00111110}, 
  {0b00111100, 0b01000010, 0b00000010, 0b00011100, 0b00000010, 0b00000010, 0b01000010, 0b00111100}, 
  {0b00000100, 0b00001100, 0b00010100, 0b00100100, 0b01000100, 0b01111110, 0b00000100, 0b00000100}, 
  {0b01111110, 0b01000000, 0b01000000, 0b01111100, 0b00000010, 0b00000010, 0b01000010, 0b00111100}, 
  {0b00111100, 0b01000010, 0b01000000, 0b01111100, 0b01000010, 0b01000010, 0b01000010, 0b00111100}, 
  {0b01111110, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b01000000}, 
  {0b00111100, 0b01000010, 0b01000010, 0b00111100, 0b01000010, 0b01000010, 0b01000010, 0b00111100}, 
  {0b00111100, 0b01000010, 0b01000010, 0b01000010, 0b00111110, 0b00000010, 0b01000010, 0b00111100}  
};

// Menu States
enum MenuState {
  MAIN_MENU,
  CHANGE_TIME_HOURS,
  CHANGE_TIME_MINUTES,
  OPTION_SELECTED,
  SUCCESS_SCREEN
};

// Menu Options
const char* menuOptions[] = {
  "Set Alarm",
  "Changer l'heure",
  "Format 12h/24h"
};
const int NUM_OPTIONS = 3;  // 3 options dans le menu principal

// Global Variables
int currentMenuIndex = 0;
MenuState currentState = MAIN_MENU;
unsigned long lastButtonPress = 0;

// Time adjustment variables
int adjustedHours = 0;
int adjustedMinutes = 0;

// Hour format: true for 24h, false for 12h
bool is24HourFormat = true;

void afficheChiffre(int matrice, int chiffre) {
  for (int row = 0; row < 8; row++) {
    lc.setRow(matrice, row, chiffresBinaire[chiffre][row]);
  }
}

void afficheHeures() {
  DateTime now = rtc.now();
  int heures, minutes;

  // During time adjustment, use adjusted values
  if (currentState == CHANGE_TIME_HOURS || currentState == CHANGE_TIME_MINUTES) {
    heures = adjustedHours;
    minutes = adjustedMinutes;
  } else {
    heures = now.hour();
    minutes = now.minute();
  }
  
  // Adjust hours for 12h format
  if (!is24HourFormat && heures > 12) {
    heures -= 12;
  }

  int h1 = heures / 10;
  int h2 = heures % 10;
  int m1 = minutes / 10;
  int m2 = minutes % 10;

  // Inverser l'ordre des matrices
  afficheChiffre(3, h1);
  afficheChiffre(2, h2);
  afficheChiffre(1, m1);
  afficheChiffre(0, m2);
}

void afficheSeparateur() {
  lc.setLed(2, 2, 7, true);
  lc.setLed(2, 5, 7, true);
}

void drawMainMenu() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("MENU:");

  for (int i = 0; i < NUM_OPTIONS; i++) {
    // Highlight the currently selected option
    if (i == currentMenuIndex) {
      display.setTextColor(SSD1306_BLACK, SSD1306_WHITE);
    } else {
      display.setTextColor(SSD1306_WHITE);
    }
    
    display.println(menuOptions[i]);
  }

  display.display();
}

void drawSuccessScreen(const char* selectedOption) {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextColor(SSD1306_WHITE);
  display.println("Option selectionnee:");
  display.println(selectedOption);
  display.println("\nReussite!");
  display.display();
}

void drawTimeAdjustmentScreen(bool isHours) {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println(isHours ? "Ajuster Heures:" : "Ajuster Minutes:");
  
  display.print(isHours ? "Heures: " : "Minutes: ");
  display.println(isHours ? adjustedHours : adjustedMinutes);
  
  display.display();
}

void drawFormatChangedScreen() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Format change!");
  display.display();
}

void setup() {
  Serial.begin(9600);

  // LED Matrix setup
  for (int i = 0; i < NUM_MATRICES; i++) {
    lc.shutdown(i, false);     
    lc.setIntensity(i, 10);     
    lc.clearDisplay(i);         
  }
  
  if (!rtc.begin()) {
    while (1);  
  }

  // Si la RTC ne fonctionne pas, on initialise l'heure
  if (!rtc.isrunning()) {
    // Initialiser la RTC avec l'heure de compilation (ou une heure donnée)
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }

  // Initialize OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);  // Infinite loop if initialization fails
  }
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);

  // Initialize Buttons
  pinMode(BTN_NAVIGATE, INPUT_PULLUP);
  pinMode(BTN_SELECT, INPUT_PULLUP);

  // S'assurer que l'état du menu est MAIN_MENU avant d'afficher
  currentState = MAIN_MENU;
  
  // Affiche l'heure tout de suite
  afficheHeures();
  
  // Affiche le menu principal immédiatement
  drawMainMenu();
}

void handleNavigation() {
  // Debounce and prevent rapid changes
  if (millis() - lastButtonPress < 200) return;

  // Navigation button pressed
  if (digitalRead(BTN_NAVIGATE) == LOW) {
    lastButtonPress = millis();
    
    switch(currentState) {
      case MAIN_MENU:
        currentMenuIndex = (currentMenuIndex + 1) % NUM_OPTIONS;
        drawMainMenu();
        break;
      
      case CHANGE_TIME_HOURS:
        adjustedHours = (adjustedHours + 1) % 24;
        drawTimeAdjustmentScreen(true);
        break;
      
      case CHANGE_TIME_MINUTES:
        adjustedMinutes = (adjustedMinutes + 1) % 60;
        drawTimeAdjustmentScreen(false);
        break;
        
      default:
        break;
    }
  }

  // Selection button pressed
  if (digitalRead(BTN_SELECT) == LOW) {
    lastButtonPress = millis();
    
    switch(currentState) {
      case MAIN_MENU:
        if (currentMenuIndex == 1) {  // Change Time option
          // Initialize time adjustment with current time
          {
            DateTime now = rtc.now();
            adjustedHours = now.hour();
            adjustedMinutes = now.minute();
          }
          currentState = CHANGE_TIME_HOURS;
          drawTimeAdjustmentScreen(true);
        } else if (currentMenuIndex == 2) {  // Format 12h/24h option
          is24HourFormat = !is24HourFormat;  // Toggle the hour format
          drawFormatChangedScreen();
          delay(1000);  // Display "Format change!" for 1 second
          currentState = MAIN_MENU;
          drawMainMenu();
        } else {
          currentState = SUCCESS_SCREEN;
          drawSuccessScreen(menuOptions[currentMenuIndex]);
        }
        break;
      
      case CHANGE_TIME_HOURS:
        currentState = CHANGE_TIME_MINUTES;
        drawTimeAdjustmentScreen(false);
        break;
      
      case CHANGE_TIME_MINUTES:
        // Save the new time
        {
          DateTime now = rtc.now();
          DateTime newTime = DateTime(now.year(), now.month(), now.day(), 
                                      adjustedHours, adjustedMinutes, 0);
          rtc.adjust(newTime);
        }
        
        // Return to main menu
        currentState = MAIN_MENU;
        drawMainMenu();
        break;
      
      case SUCCESS_SCREEN:
        // Return to main menu
        currentState = MAIN_MENU;
        drawMainMenu();
        break;
    }
  }
}

void loop() {
  // Display current or adjusted time
  afficheHeures();
  
  // Blinking separator
  if (millis() / 500 % 2 == 0) {
    afficheSeparateur();
  } else {
    lc.setLed(2, 2, 7, false);
    lc.setLed(2, 5, 7, false);
  }

  // Handle button interactions
  handleNavigation();

  // Redraw time adjustment screens if needed
  switch(currentState) {
    case CHANGE_TIME_HOURS:
      drawTimeAdjustmentScreen(true);
      break;
    case CHANGE_TIME_MINUTES:
      drawTimeAdjustmentScreen(false);
      break;
    default:
      break;
  }

  delay(50); // Petit délai pour éviter de surcharger l'affichage
}
