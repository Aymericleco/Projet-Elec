#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <RTClib.h>
#include <LedControl.h>
#include <EEPROM.h>

#define BUZZER_PIN 9 

// OLED Display Configuration
#define NUM_MATRICES 4
#define DIN_PIN 11
#define CLK_PIN 13
#define CS_PIN 10
LedControl lc = LedControl(DIN_PIN, CLK_PIN, CS_PIN, NUM_MATRICES);
RTC_DS1307 rtc;

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

int alarmHours = 7;     // Heure par défaut de l'alarme
int alarmMinutes = 0;   // Minute par défaut de l'alarme
bool alarmSet = false;  // Pour savoir si l'alarme est activée
bool alarmPlaying = false; // Savoir si la mélodie est en cours

// Boutons
#define BTN_NAVIGATE 7
#define BTN_SELECT 5

// Représentation binaire des chiffres pour les matrices
const byte chiffresBinaire[10][8] = {
  {0b00111100,0b01000010,0b01000010,0b01000010,0b01000010,0b01000010,0b01000010,0b00111100}, 
  {0b00001000,0b00011000,0b00101000,0b00001000,0b00001000,0b00001000,0b00001000,0b00111110}, 
  {0b00111100,0b01000010,0b00000010,0b00001100,0b00110000,0b01000000,0b01000010,0b00111110}, 
  {0b00111100,0b01000010,0b00000010,0b00011100,0b00000010,0b00000010,0b01000010,0b00111100}, 
  {0b00000100,0b00001100,0b00010100,0b00100100,0b01000100,0b01111110,0b00000100,0b00000100}, 
  {0b01111110,0b01000000,0b01000000,0b01111100,0b00000010,0b00000010,0b01000010,0b00111100}, 
  {0b00111100,0b01000010,0b01000000,0b01111100,0b01000010,0b01000010,0b01000010,0b00111100}, 
  {0b01111110,0b00000010,0b00000100,0b00001000,0b00010000,0b00100000,0b01000000,0b01000000}, 
  {0b00111100,0b01000010,0b01000010,0b00111100,0b01000010,0b01000010,0b01000010,0b00111100}, 
  {0b00111100,0b01000010,0b01000010,0b01000010,0b00111110,0b00000010,0b01000010,0b00111100}
};

// États du menu
enum MenuState {
  MAIN_MENU,
  CHANGE_TIME_HOURS,
  CHANGE_TIME_MINUTES,
  OPTION_SELECTED,
  SUCCESS_SCREEN,
  ALARM_HOURS,
  ALARM_MINUTES
};

// Options du menu
const char* menuOptions[] = {
  "Set Alarm",
  "Changer l'heure",
  "Format 12h/24h"
};
const int NUM_OPTIONS = 3;

// Variables globales
int currentMenuIndex = 0;
MenuState currentState = MAIN_MENU;
unsigned long lastButtonPress = 0;

// Variables pour le réglage de l'heure
int adjustedHours = 0;
int adjustedMinutes = 0;

// Format de l'heure
bool is24HourFormat = true;

void afficheChiffre(int matrice, int chiffre) {
  for (int row = 0; row < 8; row++) {
    lc.setRow(matrice, row, chiffresBinaire[chiffre][row]);
  }
}

void drawAlarmAdjustmentScreen(bool isHours) {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println(isHours ? "Ajuster Heures Alarme:" : "Ajuster Minutes Alarme:");
  
  display.print(isHours ? "Heures: " : "Minutes: ");
  display.println(isHours ? alarmHours : alarmMinutes);
  
  display.display();
}

void afficheHeures() {
  DateTime now = rtc.now();
  int heures, minutes;

  if (currentState == CHANGE_TIME_HOURS || currentState == CHANGE_TIME_MINUTES) {
    heures = adjustedHours;
    minutes = adjustedMinutes;
  } else {
    heures = now.hour();
    minutes = now.minute();
  }
  
  // Format 12h
  if (!is24HourFormat && heures > 12) {
    heures -= 12;
  }

  int h1 = heures / 10;
  int h2 = heures % 10;
  int m1 = minutes / 10;
  int m2 = minutes % 10;

  // Inversion de l'ordre des matrices
  afficheChiffre(3, h1);
  afficheChiffre(2, h2);
  afficheChiffre(1, m1);
  afficheChiffre(0, m2);
}

void afficheSeparateur() {
  lc.setLed(2, 2, 7, true);
  lc.setLed(2, 5, 7, true);
}

void drawMainMenu() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("MENU:");

  for (int i = 0; i < NUM_OPTIONS; i++) {
    if (i == currentMenuIndex) {
      display.setTextColor(SSD1306_BLACK, SSD1306_WHITE);
    } else {
      display.setTextColor(SSD1306_WHITE);
    }
    display.println(menuOptions[i]);
  }

  display.display();
}

int readMelodyFromEEPROM(int &nombreDeNotes) {
  int addr = 0;
  nombreDeNotes = (EEPROM.read(addr) << 8) | EEPROM.read(addr+1);
  addr += 2;
  return addr; // adresse de début des notes
}

void playMelody() {
  int nombreDeNotes;
  int addr = readMelodyFromEEPROM(nombreDeNotes);

  unsigned long startTime = millis();
  for (int i = 0; i < nombreDeNotes; i++) {
    int freq = (EEPROM.read(addr) << 8) | EEPROM.read(addr+1);
    addr += 2;
    int duree = (EEPROM.read(addr) << 8) | EEPROM.read(addr+1);
    addr += 2;

    if (millis() - startTime > 10000) {
      noTone(BUZZER_PIN);
      break;
    }

    tone(BUZZER_PIN, freq, duree);
    delay(duree);
  }
  noTone(BUZZER_PIN);
}

void drawSuccessScreen(const char* selectedOption) {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextColor(SSD1306_WHITE);
  display.println("Option selectionnee:");
  display.println(selectedOption);
  display.println("\nReussite!");
  display.display();
}

void drawTimeAdjustmentScreen(bool isHours) {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println(isHours ? "Ajuster Heures:" : "Ajuster Minutes:");
  
  display.print(isHours ? "Heures: " : "Minutes: ");
  display.println(isHours ? adjustedHours : adjustedMinutes);
  
  display.display();
}

void drawFormatChangedScreen() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Format change!");
  display.display();
}

// Fonction pour vérifier l'alarme
void checkAlarm() {
  if (alarmSet && !alarmPlaying) {
    DateTime now = rtc.now();
    if (now.hour() == alarmHours && now.minute() == alarmMinutes) {
      // Déclenche l'alarme
      alarmPlaying = true;
      playMelody();
    }
  }
}

void setup() {
  Serial.begin(9600);

  for (int i = 0; i < NUM_MATRICES; i++) {
    lc.shutdown(i, false);     
    lc.setIntensity(i, 10);     
    lc.clearDisplay(i);         
  }
  
  if (!rtc.begin()) {
    while (1);
  }

  if (!rtc.isrunning()) {
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);

  pinMode(BTN_NAVIGATE, INPUT_PULLUP);
  pinMode(BTN_SELECT, INPUT_PULLUP);
  pinMode(BUZZER_PIN, OUTPUT);

  currentState = MAIN_MENU;
  
  afficheHeures();
  drawMainMenu();
}

void handleNavigation() {
  // Si l'alarme joue et qu'on appuie sur un bouton, on l'éteint
  if (alarmPlaying && (digitalRead(BTN_NAVIGATE) == LOW || digitalRead(BTN_SELECT) == LOW)) {
    noTone(BUZZER_PIN);
    alarmPlaying = false;
    alarmSet = false;
    lastButtonPress = millis();
    return;
  }
  
  // Debounce
  if (millis() - lastButtonPress < 200) return;

  if (digitalRead(BTN_NAVIGATE) == LOW) {
    lastButtonPress = millis();
    
    switch(currentState) {
      case MAIN_MENU:
        currentMenuIndex = (currentMenuIndex + 1) % NUM_OPTIONS;
        drawMainMenu();
        break;
      
      case CHANGE_TIME_HOURS:
        adjustedHours = (adjustedHours + 1) % 24;
        drawTimeAdjustmentScreen(true);
        break;
      
      case CHANGE_TIME_MINUTES:
        adjustedMinutes = (adjustedMinutes + 1) % 60;
        drawTimeAdjustmentScreen(false);
        break;

      case ALARM_HOURS:
        alarmHours = (alarmHours + 1) % 24;
        drawAlarmAdjustmentScreen(true);
        break;

      case ALARM_MINUTES:
        alarmMinutes = (alarmMinutes + 1) % 60;
        drawAlarmAdjustmentScreen(false);
        break;

      default:
        break;
    }
  }

  if (digitalRead(BTN_SELECT) == LOW) {
    lastButtonPress = millis();
    
    switch(currentState) {
      case MAIN_MENU:
        if (currentMenuIndex == 0) {  // Set Alarm
          currentState = ALARM_HOURS;
          drawAlarmAdjustmentScreen(true);
        } else if (currentMenuIndex == 1) {  // Changer l'heure
          {
            DateTime now = rtc.now();
            adjustedHours = now.hour();
            adjustedMinutes = now.minute();
          }
          currentState = CHANGE_TIME_HOURS;
          drawTimeAdjustmentScreen(true);
        } else if (currentMenuIndex == 2) {  // Format 12h/24h
          is24HourFormat = !is24HourFormat;
          drawFormatChangedScreen();
          delay(1000);
          currentState = MAIN_MENU;
          drawMainMenu();
        }
        break;
     
      case ALARM_HOURS:
        // Passer aux minutes
        currentState = ALARM_MINUTES;
        drawAlarmAdjustmentScreen(false);
        break;

      case ALARM_MINUTES:
        // On a fini de régler l'alarme
        alarmSet = true;
        currentState = MAIN_MENU;
        drawMainMenu();
        break;

      case CHANGE_TIME_HOURS:
        currentState = CHANGE_TIME_MINUTES;
        drawTimeAdjustmentScreen(false);
        break;
      
      case CHANGE_TIME_MINUTES:
        {
          DateTime now = rtc.now();
          DateTime newTime = DateTime(now.year(), now.month(), now.day(), 
                                      adjustedHours, adjustedMinutes, 0);
          rtc.adjust(newTime);
        }
        currentState = MAIN_MENU;
        drawMainMenu();
        break;
      
      case SUCCESS_SCREEN:
        // Retour au menu principal après succès
        currentState = MAIN_MENU;
        drawMainMenu();
        break;

      default:
        break;
    }
  }
}

void loop() {
  afficheHeures();
  
  // Clignotement du séparateur
  if (millis() / 500 % 2 == 0) {
    afficheSeparateur();
  } else {
    lc.setLed(2, 2, 7, false);
    lc.setLed(2, 5, 7, false);
  }

  handleNavigation();
  checkAlarm();

  // Redessiner les écrans de réglage si nécessaire
  switch(currentState) {
    case CHANGE_TIME_HOURS:
      drawTimeAdjustmentScreen(true);
      break;
    case CHANGE_TIME_MINUTES:
      drawTimeAdjustmentScreen(false);
      break;
    default:
      break;
  }

  delay(50);
} 
